1 + 2
width<-4
width<-4
width<-4
width <-4
width <-4
height <-2
width <- 4
width <- 4
1 + 2
height <-2
width <- 4
ls()
height * width
area
area
area
area
area
area
# Data Camp practice the basic of R
1 + 2
height <-2
width <- 4
ls()
height * width
area <-height * width
area
area
area
area
area
install.packages(c("boot", "class", "foreign", "MASS", "Matrix", "nlme", "spatial", "survival"))
ls()
# Data Camp practice the basic of R
1 + 2
height <-2
width <- 4
ls()
height * width
area <-height * width
area
ls()
TRUE
class(TRUE)
class(FALSE)
# Numeric
2
# Numeric
2
2.5
2L
class(2)
class(2L)
is.integer(2L)
is.numeric(2)
is.numeric(2L)
is.integer(2)
is.integer(2L)
class("just start to learn Data Scince")
# data type in R
#Logic
TRUE
class(TRUE)
FALSE
class(FALSE)
# Numeric
2
2.5
2L
# get the type of file
class(2)
class(2L)
# check the type
is.numeric(2)
is.numeric(2L)
is.integer(2)
is.integer(2L)
# Character
"Just start to Learn Data Scince"
class("just start to learn Data Scince")
# Other type of data
# double: higher precision
# complex: complex numbers
# raw: store raw bytes
# Converting the type of the data
as.numeric(TRUE)
as.numeric(FALSE)
as.character(4)
as.numeric("4.5")
as.integer("4.5")
as.numeric("hello") # error in data type for converting the cahr to numeric
class(2.5)
class(2L)
# get the type of file
class(2)
class(2.5)
class(2)
class(2.5)
class(2L)
Drwan_suits <- c("hears", "spades", "diamonds", "diamonds", "spades")
is.vector(Drwan_suits)
remain
remain
remain <- c(11,12, 11, 13)
suits <- c("spades","hearts","diamonds", "clubs")
names(remain) <- suits
remain
remain
pring(remain)
print(remain)
remain_3 <- c("spades"= 11, "hearts" = 12, "diamonds" = 11, "clubs"= 13)
remain_2 <- c(spades = 11, hearts = 12, diamonds= 11, clubs = 13)  # with out " "
remain_3 <- c("spades"= 11, "hearts" = 12, "diamonds" = 11, "clubs"= 13)
Named num [1:4]
print(drawn_ranks)
drawn_ranks <- c(7, 4, "A", 10, "k", 3, 2, "Q") # it will convert to char automaticlly
print(drawn_ranks)
my_apples + my_oranges
my_apples <- 5
my_oranges <- 6
my_apples + my_oranges
earning * 3
earning <- c(50, 100, 30)
earning * 3
earning <- c(50, 100, 30)
earning * 3
earning / 10
earning - 20
earning + 100
earning ^2
earning - expenses
expenses <- c(30, 40, 80)
earning - expenses
expenses <- c(30, 40, 80)
earning - expenses
earning + c(10, 20, 30)
earning * c(1,2,3)
earning / c(1,2,3)
# Element Wise
expenses <- c(30, 40, 80)
earning * 3
earning / 10
earning - 20
earning + 100
earning ^2
bank
bank <- earnings - expenses
bank
print(bank)
bank <- earnings - expenses
bank <- earnings - expenses
earnings <- c(50,100,30)
expenses <- c(30, 40, 80)
bank <- earnings - expenses
print(bank)
sum(bank)
remain[1].  # take element at index 1
remain[1]  # take element at index 1
spades #  result is a (named) vector tool
spades
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
remain[1]  # take element at index 1
#.      spades. 11
reamin[3] # diamonds 11
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
remain[1]  # take element at index 1
#.      spades. 11
remain[3] # diamonds 11
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# ---- take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# ---- using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# ----- subset multiple elements
remain_black <- remain[c(1,4)]
remian_black  # spades   clubs
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# ---- take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# ---- using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# ----- subset multiple elements
remain_black <- remain[c(1,4)]
remian_black  # spades   clubs
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# -----    take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# -----   using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# -----  subset multiple elements
remain_black <- remain[c(1,4)]
remian_black  # spades   clubs
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# -----    take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# -----   using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# -----  subset multiple elements
remain_black <- remain[c(1,4)]
remain_black  # spades   clubs
#  11.      13
# change the order in selecting the vector
remain_black <- remain[c(4,1)]
remain_black  # clubs.  spades
#  13      11
# using the name in selecting form vector
remain[c("clubs", "spades")]
remain  # clubs  spades
#  13.     11
# -------- subset all but some
remain[-1]   # it will select all the elements except the index 1
#  heats  diamonds  clubs
#.  12.     11.      13
remain[-c(1,2)]
# diamonds   clubs
#. 11.        13
remain[-" spades "]
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# -----    take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# -----   using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# -----  subset multiple elements
remain_black <- remain[c(1,4)]
remain_black  # spades   clubs
#  11.      13
# change the order in selecting the vector
remain_black <- remain[c(4,1)]
remain_black  # clubs.  spades
#  13      11
# using the name in selecting form vector
remain[c("clubs", "spades")]
remain  # clubs  spades
#  13.     11
# -------- subset all but some
remain[-1]   # it will select all the elements except the index 1
#  heats  diamonds  clubs
#.  12.     11.      13
remain[-c(1,2)]
# diamonds   clubs
#. 11.        13
# remain[-" spades "]
# ERROR in -"spades" : invalid argument to unary operator
# --------- subset using logical vector
remain[c(FALSE,TRUE, FALSE,TRUE)]
#  hearts   clubs
#.  12.       13
seletion_vector <- c(FALSE,TRUE,FALSE,TRUE)
remain[selection_vector]
selection_vector <- c(FALSE,TRUE,FALSE,TRUE)
remain <- c(spades =11, hearts = 12, diamonds = 11, clubs =13)
# -----    take element at index 1
remain[1]  #  spades
#.   11
remain[3]     #  diamonds
#    11
# -----   using name space
remain["spades"] # spades
#. 11
remain["diamonds"]    # diamonds
#.  11
# -----  subset multiple elements
remain_black <- remain[c(1,4)]
remain_black  # spades   clubs
#  11.      13
# change the order in selecting the vector
remain_black <- remain[c(4,1)]
remain_black  # clubs.  spades
#  13      11
# using the name in selecting form vector
remain[c("clubs", "spades")]
remain  # clubs  spades
#  13.     11
# -------- subset all but some
remain[-1]   # it will select all the elements except the index 1
#  heats  diamonds  clubs
#.  12.     11.      13
remain[-c(1,2)]
# diamonds   clubs
#. 11.        13
# remain[-" spades "]
# ERROR in -"spades" : invalid argument to unary operator
# --------- subset using logical vector
remain[c(FALSE,TRUE, FALSE,TRUE)]
#  hearts   clubs
#.  12.       13
selection_vector <- c(FALSE,TRUE,FALSE,TRUE)
remain[selection_vector]
#   hearts.    clubs
#.   12          13
remain[c(TRUE, FALSE)]
# spades   diamonds     R recycles c (T, F) to c(T, F, T, F)
#  11.       11
remain[c(TRUE,FALSE,TRUE,FALSE)]
#. spades    diamonds
#   11.        11
remain[c(TRUE, FALSE, TRUE)]
#  spades   diamonds.  clubs
#   11.      11.         13
remain[c(TRUE, FALSE, TRUE, TRUE)]
# spades  diamonds.  clubs
#  11.      11.       13
matrix(1:4, nrow = 2, ncol = 3)
#       [,1] [,2] [,3]
# [1,].  1    3     2
# [2,]   2    1     3
cbind(m, c(10, 11))
m <- matrix(1:6, byrow=TRUE, nrow =2)
rbind(m, 7:9)
#       [,1] [,2] [,3]
# [1,]   1    2     3
# [2,]   4    5     6
# [3,].  7.   8.    9
cbind(m, c(10, 11))
m
m <- matrix(1:6, byrow = TRUE, nrow=2)
rownames(m) <- c("row1", "row2")
m
m
colnames(m) <- c("col1", "col2", "col3")
m
s
s <- matrix(1:6, byrow = TRUE, nrow=2,
dimnames = list(c ("row1","row2"),
c("col1","col2","col3")))
s
num <- matrix(1:8,ncol =2)
char <- matrix(LETTERS[1:6],nrow=4,ncol=3)
cbind(num,char)
m
m
m <- matrix(sample(1:15, 12), nrow = 3)
m
m[1,3]
m[3,2]
m[3,]  # select row 3
m[,3] # select column 3
m[4]
m[4]
m[2, c(2,3)]
m[c(1,2), c(2,3)]
m
rownames(m) <- c("r1","r2", "r3")
colonames(m) <- c("a", "b","c","d")
rownames(m) <- c("r1","r2", "r3")
colnames(m) <- c("a", "b","c","d")
m
m["r2","c"]
m[2,"c"]
m[3, c("c","d")]
m[c(FALSE,FALSE,TRUE),c(FALSE,FALSE,TRUE,TRUE)]
m[c(FALSE,FALSE,TRUE),c(FALSE,TRUE)]
m[c(FALSE,FALSE,TRUE), c(FALSE,TRUE,FALSE,TRUE)]
m[c(FALSE, FALSE, TRUE),
c(FALSE, FALSE, TRUE, TRUE)]
#  c  d
#  3 13
m[c(FALSE, FALSE, TRUE),
c(FALSE, TRUE)]
#  b  d
#  4 13
m[c(FALSE, FALSE, TRUE),
c(FALSE, TRUE, FALSE, TRUE)]
remain <- c(11,12, 11, 13)
suits <- c("spades","hearts","diamonds", "clubs")
names(remain) <- suits. # use names() method
remain <- c(11,12, 11, 13)
suits <- c("spades","hearts","diamonds", "clubs")
names(remain) <- suits. # use names() method
remain <- c(11,12, 11, 13)
suits <- c("spades","hearts","diamonds", "clubs")
names(remain) <- suits # use names() method
print(remain)
#Coercion for vectors
drawn_ranks <- c(7, 4, "A", 10, "k", 3, 2, "Q")
print(drawn_ranks) # it will convert to char automatically
