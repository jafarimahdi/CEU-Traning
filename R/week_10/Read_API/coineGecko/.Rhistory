print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:3, CurlReader)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
library(jsonlite)
require(httr)
library(data.table)
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
library(jsonlite)
require(httr)
library(data.table)
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
View(list_of_dataFrames)
View(list_of_dataFrames[[1]])
View(list_of_dataFrames[[2]])
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
list_of_dataFrames[[1]]
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
ls
ls
setwd("~/greenFox/CEU-Traning/R/week_10/Read_API/coineGecko")
library(jsonlite)
require(httr)
library(data.table)
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
View(CurlReader)
View(list_of_dataFrames)
View(list_of_dataFrames[[1]])
str(dataFram_from_allPages)
library(jsonlite)
require(httr)
library(data.table)
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json)
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
str(dataFram_from_allPages)
str(list_of_dataFrames)
View(list_of_dataFrames)
str(list_of_dataFrames[1])
str(list_of_dataFrames[[1]])
first_df <- dataFram_from_allPages[[1]]
first_df <- list_of_dataFrames[[1]]
library(jsonlite)
require(httr)
library(data.table)
CurlReader <- function(pageNum) {
headers = c(
`accept` = "application/json"
)
params = list(
`vs_currency` = "usd",
`order` = "market_cap_desc",
`per_page` = "250",
`page` = as.character(pageNum), # we should convert  user input to the string
`sparkline` = "false",
`locale` = "en"
)
response <- httr::GET(url = "https://api.coingecko.com/api/v3/coins/markets", httr::add_headers(.headers=headers), query = params)
# in case of facing 404 error for the request we should give time to try again for the request
if (response$status_code == 429) {
print("wait for 60 second and request agin ")
Sys.sleep(60)
CurlReader(pageNum) # we call again our function it named "Recursion"
}
# convert the response as result to the json file
as_a_json <- content(response,'text')
# convert the result of one page as json to the data.fram file
as_a_dataFrame <- fromJSON(as_a_json, flatten = TRUE) # for making the nested data.frame file we should use "flatten" function
return(as_a_dataFrame) # return data.fram file from 1 page
}
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
str(list_of_dataFrames[[1]])
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
first_df
first_df
first_df <- list_of_dataFrames[[1]]
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
str(list_of_dataFrames[[1]])
first_df <- list_of_dataFrames[[1]]
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
dataFram_from_allPages <- rbindlist(list_of_dataFrames, fill = TRUE)
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
rbindlist(list_of_dataFrames)
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
rbindlist(list_of_dataFrames)
# call the function for 50 data.frame come from 50 pages in coinGecko.com and the result will be a List
list_of_dataFrames <- lapply(1:2, CurlReader)
first_df$
# combine all the data.fram files in list() to a new and one data.frame file
rbindlist(list_of_dataFrames)
list_of_dataFrames
# combine all the data.fram files in list() to a new and one data.frame file
rbindlist(list_of_dataFrames)
# save all the result in local machine as RDS file
saveRDS(dataFram_from_allPages,'coinGecko_data.rds')
require(httr)
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
# Tracking the TradingView  data website wit ftech/Xhr
require(httr)
cookies = c(
`cookiesSettings` = '{"analytics":true,"advertising":true}',
`cookiePrivacyPreferenceBannerProduction` = "accepted",
`_sp_ses.cf1a` = "*",
`_sp_id.cf1a` = "32a20731-a951-4686-afbc-bd27ad6c69f2.1619626652.291.1681811086.1647017175.2ff8db3f-4577-4713-bd11-cd9d7d781725"
)
headers = c(
`authority` = "scanner.tradingview.com",
`accept` = "text/plain, */*; q=0.01",
`accept-language` = "en-US,en;q=0.9,fa;q=0.8,hu;q=0.7",
`content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
`origin` = "https://www.tradingview.com",
`referer` = "https://www.tradingview.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`sec-gpc` = "1",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
data = '{"filter":[{"left":"type","operation":"in_range","right":["stock","dr","fund"]},{"left":"subtype","operation":"in_range","right":["common","foreign-issuer","","etf","etf,odd","etf,otc","etf,cfd"]},{"left":"exchange","operation":"in_range","right":["AMEX","NASDAQ","NYSE"]},{"left":"is_primary","operation":"equal","right":true},{"left":"active_symbol","operation":"equal","right":true}],"options":{"lang":"en"},"markets":["america"],"symbols":{"query":{"types":[]},"tickers":[]},"columns":["logoid","name","close","change","change_abs","Recommend.All","volume","Value.Traded","market_cap_basic","price_earnings_ttm","earnings_per_share_basic_ttm","number_of_employees","sector","description","type","subtype","update_mode","pricescale","minmov","fractional","minmove2","currency","fundamental_currency_code"],"sort":{"sortBy":"market_cap_basic","sortOrder":"desc"},"range":[0,150]}'
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
View(res)
content(res,'text')
convert_to_dataFram <-toJSON(convert_to_Json)
# get the data
convert_to_Json <- content(res,'text')
convert_to_dataFram <-toJSON(convert_to_Json)
convert_to_dataFram
convert_to_dataFram
convert_to_dataFram[[1]]
# Tracking the TradingView  data website wit ftech/Xhr
require(httr)
cookies = c(
`cookiesSettings` = '{"analytics":true,"advertising":true}',
`cookiePrivacyPreferenceBannerProduction` = "accepted",
`_sp_ses.cf1a` = "*",
`_sp_id.cf1a` = "32a20731-a951-4686-afbc-bd27ad6c69f2.1619626652.291.1681811086.1647017175.2ff8db3f-4577-4713-bd11-cd9d7d781725"
)
headers = c(
`authority` = "scanner.tradingview.com",
`accept` = "text/plain, */*; q=0.01",
`accept-language` = "en-US,en;q=0.9,fa;q=0.8,hu;q=0.7",
`content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
`origin` = "https://www.tradingview.com",
`referer` = "https://www.tradingview.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`sec-gpc` = "1",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
data = '{"filter":[{"left":"type","operation":"in_range","right":["stock","dr","fund"]},{"left":"subtype","operation":"in_range","right":["common","foreign-issuer","","etf","etf,odd","etf,otc","etf,cfd"]},{"left":"exchange","operation":"in_range","right":["AMEX","NASDAQ","NYSE"]},{"left":"is_primary","operation":"equal","right":true},{"left":"active_symbol","operation":"equal","right":true}],"options":{"lang":"en"},"markets":["america"],"symbols":{"query":{"types":[]},"tickers":[]},"columns":["logoid","name","close","change","change_abs","Recommend.All","volume","Value.Traded","market_cap_basic","price_earnings_ttm","earnings_per_share_basic_ttm","number_of_employees","sector","description","type","subtype","update_mode","pricescale","minmov","fractional","minmove2","currency","fundamental_currency_code"],"sort":{"sortBy":"market_cap_basic","sortOrder":"desc"},"range":[0,150]}'
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
# get the data
convert_to_Json <- content(res,'text')
convert_to_dataFram <-toJSON(convert_to_Json)
convert_to_dataFram[[1]]
convert_to_Json
convert_to_dataFram <-fromJSON(convert_to_Json)
View(convert_to_dataFram)
convert_to_dataFram
View(convert_to_dataFram)
View(convert_to_dataFram)
convert_to_dataFram
class(convert_to_dataFram)
convert_to_dataFram
class(convert_to_dataFram)
convert_to_dataFrame <- rbindlist(convert_to_list)
convert_to_dataFrame
# Tracking the TradingView  data website wit ftech/Xhr
# in case of using API, we can check the website same as HTML target, and get json,
# but get the data form 'fetch/xhr' instead on 'network'
# section and
require(httr)
cookies = c(
`cookiesSettings` = '{"analytics":true,"advertising":true}',
`cookiePrivacyPreferenceBannerProduction` = "accepted",
`_sp_ses.cf1a` = "*",
`_sp_id.cf1a` = "32a20731-a951-4686-afbc-bd27ad6c69f2.1619626652.291.1681811086.1647017175.2ff8db3f-4577-4713-bd11-cd9d7d781725"
)
headers = c(
`authority` = "scanner.tradingview.com",
`accept` = "text/plain, */*; q=0.01",
`accept-language` = "en-US,en;q=0.9,fa;q=0.8,hu;q=0.7",
`content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
`origin` = "https://www.tradingview.com",
`referer` = "https://www.tradingview.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`sec-gpc` = "1",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
data = '{"filter":[{"left":"type","operation":"in_range","right":["stock","dr","fund"]},{"left":"subtype","operation":"in_range","right":["common","foreign-issuer","","etf","etf,odd","etf,otc","etf,cfd"]},{"left":"exchange","operation":"in_range","right":["AMEX","NASDAQ","NYSE"]},{"left":"is_primary","operation":"equal","right":true},{"left":"active_symbol","operation":"equal","right":true}],"options":{"lang":"en"},"markets":["america"],"symbols":{"query":{"types":[]},"tickers":[]},"columns":["logoid","name","close","change","change_abs","Recommend.All","volume","Value.Traded","market_cap_basic","price_earnings_ttm","earnings_per_share_basic_ttm","number_of_employees","sector","description","type","subtype","update_mode","pricescale","minmov","fractional","minmove2","currency","fundamental_currency_code"],"sort":{"sortBy":"market_cap_basic","sortOrder":"desc"},"range":[0,150]}'
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
# change thethe data type
convert_to_Json <- content(res,'text')
# to the data.fram
convert_to_list <-fromJSON(convert_to_Json)
convert_to_dataFrame <- rbindlist(convert_to_list)
View(convert_to_dataFram)
View(convert_to_dataFram)
library(data.table)
# Tracking the TradingView  data website wit ftech/Xhr
# in case of using API, we can check the website same as HTML target, and get json,
# but get the data form 'fetch/xhr' instead on 'network'
# section and
require(httr)
library(data.table)
cookies = c(
`cookiesSettings` = '{"analytics":true,"advertising":true}',
`cookiePrivacyPreferenceBannerProduction` = "accepted",
`_sp_ses.cf1a` = "*",
`_sp_id.cf1a` = "32a20731-a951-4686-afbc-bd27ad6c69f2.1619626652.291.1681811086.1647017175.2ff8db3f-4577-4713-bd11-cd9d7d781725"
)
headers = c(
`authority` = "scanner.tradingview.com",
`accept` = "text/plain, */*; q=0.01",
`accept-language` = "en-US,en;q=0.9,fa;q=0.8,hu;q=0.7",
`content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
`origin` = "https://www.tradingview.com",
`referer` = "https://www.tradingview.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`sec-gpc` = "1",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
data = '{"filter":[{"left":"type","operation":"in_range","right":["stock","dr","fund"]},{"left":"subtype","operation":"in_range","right":["common","foreign-issuer","","etf","etf,odd","etf,otc","etf,cfd"]},{"left":"exchange","operation":"in_range","right":["AMEX","NASDAQ","NYSE"]},{"left":"is_primary","operation":"equal","right":true},{"left":"active_symbol","operation":"equal","right":true}],"options":{"lang":"en"},"markets":["america"],"symbols":{"query":{"types":[]},"tickers":[]},"columns":["logoid","name","close","change","change_abs","Recommend.All","volume","Value.Traded","market_cap_basic","price_earnings_ttm","earnings_per_share_basic_ttm","number_of_employees","sector","description","type","subtype","update_mode","pricescale","minmov","fractional","minmove2","currency","fundamental_currency_code"],"sort":{"sortBy":"market_cap_basic","sortOrder":"desc"},"range":[0,150]}'
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
# change thethe data type
convert_to_Json <- content(res,'text')
# to the data.fram
convert_to_list <-fromJSON(convert_to_Json)
convert_to_dataFrame <- rbindlist(convert_to_list)
convert_to_dataFrame <- rbindlist(convert_to_list)
convert_to_dataFrame <- rbindlist(convert_to_list)
# Tracking the TradingView  data website wit ftech/Xhr
# in case of using API, we can check the website same as HTML target, and get json,
# but get the data form 'fetch/xhr' instead on 'network'
# section and
require(httr)
library(data.table)
cookies = c(
`cookiesSettings` = '{"analytics":true,"advertising":true}',
`cookiePrivacyPreferenceBannerProduction` = "accepted",
`_sp_ses.cf1a` = "*",
`_sp_id.cf1a` = "32a20731-a951-4686-afbc-bd27ad6c69f2.1619626652.291.1681811086.1647017175.2ff8db3f-4577-4713-bd11-cd9d7d781725"
)
headers = c(
`authority` = "scanner.tradingview.com",
`accept` = "text/plain, */*; q=0.01",
`accept-language` = "en-US,en;q=0.9,fa;q=0.8,hu;q=0.7",
`content-type` = "application/x-www-form-urlencoded; charset=UTF-8",
`origin` = "https://www.tradingview.com",
`referer` = "https://www.tradingview.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`sec-gpc` = "1",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
data = '{"filter":[{"left":"type","operation":"in_range","right":["stock","dr","fund"]},{"left":"subtype","operation":"in_range","right":["common","foreign-issuer","","etf","etf,odd","etf,otc","etf,cfd"]},{"left":"exchange","operation":"in_range","right":["AMEX","NASDAQ","NYSE"]},{"left":"is_primary","operation":"equal","right":true},{"left":"active_symbol","operation":"equal","right":true}],"options":{"lang":"en"},"markets":["america"],"symbols":{"query":{"types":[]},"tickers":[]},"columns":["logoid","name","close","change","change_abs","Recommend.All","volume","Value.Traded","market_cap_basic","price_earnings_ttm","earnings_per_share_basic_ttm","number_of_employees","sector","description","type","subtype","update_mode","pricescale","minmov","fractional","minmove2","currency","fundamental_currency_code"],"sort":{"sortBy":"market_cap_basic","sortOrder":"desc"},"range":[0,150]}'
res <- httr::POST(url = "https://scanner.tradingview.com/america/scan", httr::add_headers(.headers=headers), httr::set_cookies(.cookies = cookies), body = data)
# change thethe data type
convert_to_Json <- content(res,'text')
# to the data.fram
convert_to_list <-fromJSON(convert_to_Json, flatten = TRUE)
convert_to_dataFrame <- rbindlist(convert_to_list)
convert_to_dataFrame <- rbindlist(convert_to_list)
View(convert_to_list)
# url: https://www.nasdaq.com/market-activity/stocks/screener
require(httr)
headers = c(
`authority` = "api.nasdaq.com",
`accept` = "application/json, text/plain, */*",
`accept-language` = "en-US,en;q=0.9",
`origin` = "https://www.nasdaq.com",
`referer` = "https://www.nasdaq.com/",
`sec-ch-ua` = '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
`sec-ch-ua-mobile` = "?0",
`sec-ch-ua-platform` = '"macOS"',
`sec-fetch-dest` = "empty",
`sec-fetch-mode` = "cors",
`sec-fetch-site` = "same-site",
`user-agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
)
params = list(
`tableonly` = "true",
`limit` = "25",
`offset` = "25"
)
res <- httr::GET(url = "https://api.nasdaq.com/api/screener/stocks", httr::add_headers(.headers=headers), query = params)
convert_to_list <-fromJSON(content(res, 'text'))
convert_to_list$data$table$rows
df <- convert_to_list$data$table$rows
df
View(df)
View(df)
