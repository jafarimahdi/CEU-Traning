mutate(power2 = hp*cyl)
# -----------------------------------
#.how to show the data in work space
# 1- in terminal View(iris)
# 2- iris <- iris
# ----------------------------------
# task-2: first filter Sepal.length bigger than 5
# calculate a new column called sum_length
# order the sum_length
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4) %>%
arrange(-sum_length)
# star wars data-set
df <- starwars
# summaries() is a function for calculating the data from columns
#--------- n() is spacial function in R to get the number of rows
# "na.rm = T" is R method to make ability for showing the number in case we have one number in average() method
df %>%
summarise(number_of_rows = n(),average_height = mean(height, na.rm = T))
#----unique()  get the unique data that's in column in data-set
# old way
unique(df$species)
# with help of "dplyr" library
df %>%
summarise(unique(species))
# -- task-3:  question missed ? :)
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
arrange(-number_of_rows)
# task-4 : calculating the average of height by species and order from the biggest
df %>%
group_by(species)%>%
summarise(show_avrage = mean(height, na.rm = T))%>%
arrange(-show_avrage) %>%
head(1) # it show the biggest one
#task-5: calculate the max mass for every group where the height is grater 170 cm and return the list max value
df %>%
filter(height > 170) %>%
group_by(species) %>%
summarise(max_value = max(mass)) %>%
arrange(-max_value)
library(dplyr)
library(dplyr)
mtcars %>%
filter(hp>200)
avengers %>%
filter(iq>130)
avengers %>%
filter(iq>130, injuries > 3)
avengers %>%
filter(iq>130, injuries > 3)
filter(avengers, iq>130, injuries > 3)
filter(avengers, iq>130, injuries > 3, damage.resistance > 1.9)
# define as new column/variable
normal_people <- filter(avengers, superpower == "yes")
install.packages("httpuv")
# define as new column/variable
normal_people <- filter(avengers, superpower == "yes")
View(avengers)
# define as new column/variable to data-set
normal_people <- filter(avengers, superpower == "yes")
head(normal_people)
# more complex filtering
filter(avengers, shots.taken>400 | minutes.fihting<60) # | means OR
# more complex filtering
filter(avengers, shots.taken>400 | minutes.fighting<60) # | means OR
# more complex filtering
filter(avengers, shots.taken>400 | minutes.fighting>60) # | means OR
# more complex filtering
filter(avengers, shots.taken>400 | minutes.fighting>60) # | means OR
filter(avengers, shots.taken>400 & minutes.fighting>60)
filter(avengers, shots.taken>=200 & superpower!="yes")
# ----------------------  % in % find every instance that meets multiple conditions
# using expenses data-set we created in line 9 to 15
filter(expenses, item %in% c('loptop',"clothes"))
# ----------------------  % in % find every instance that meets multiple conditions
# using expenses data-set we created in line 9 to 15
filter(expenses, item %in% c('loptop',"clothes"))
# install package "dplyr"
require(tidyverse)
library(dplyr) # really important to run this line always, due not working well "sheet IDE"
#require(flexplot) for being able to use 'avengers' data-set
library(flexplot)
#filtering in old way
laptop<-854; books<-321; clothes<-228
expenses <-c(laptop, books, clothes)
items <-c("laptop","books","clothes")
expenses <- data.frame(item<-items, cost<-expenses)
laptop_row<-expenses$item == "laptop"
expenses[laptop_row,]
#---- filter() in the "dplyr" package
filter(expenses, item =="laptop")
# practice in avenger data-set
filter(avengers, iq>130, injuries > 3, damage.resistance > 1.9)
# define as new column/variable to data-set
normal_people <- filter(avengers, superpower == "yes")
head(normal_people)
# more complex filtering
filter(avengers, shots.taken>400 | minutes.fighting>60) # | means OR
filter(avengers, shots.taken>100 & minutes.fighting>60) # & means AND
filter(avengers, shots.taken>=200 & superpower!="yes") # !=
# ----------------------  % in % find every instance that meets multiple conditions
# using expenses data-set we created in line 9 to 15
filter(expenses, item %in% c('loptop',"clothes"))
# ----------------------  % in % find every instance that meets multiple conditions
# using expenses data-set we created in line 9 to 15
filter(expenses, item %in% c('laptop',"clothes"))
sorted_injuries <- arrange(avengers, injuries)
sorted_injuries <- arrange(avengers, injuries)
head(sorted_injuries)
head(sorted_injuries)
sorted_injuries <- arrange(avengers, injuries)
head(sorted_injuries)
sorted_injuries_desc <- arrange(avengers, desc(injuries))
head(sorted_injuries)
sorted_injuries <- arrange(avengers, injuries)
head(sorted_injuries)
sorted_injuries_desc <- arrange(avengers, desc(injuries))
head(sorted_injuries_desc)
head(sorted_injuries_multiColumn)
sorted_injuries_multiColumn <- arrange(avengers, desc(injuries), north_south)
head(sorted_injuries_multiColumn)
head(sorted_injuries_multiColumn, n=20)
head(new_avengers)
new_avengers <- select(avengers, iq, agility, speed)
head(new_avengers)
new_avengers <- select(avengers, iq, agility, speed) %>%
head(new_avengers)
new_avengers <- select(avengers, iq, agility, speed) %>%
head(new_avengers)
new_avengers <- select(avengers, iq, agility, speed)
head(new_avengers)
install.packages("dplyr")
install.packages("nycflights13")
# using "nycflights13" package
library(nycflights13)
library(nycflights13)
View(nycflights13)
# how to check the list of data inside of package
ncyflights13::
# how to check the list of data inside of package
ncyflights13::airlines
# how to check the list of data inside of package
nycflights13::airlines
# how to view the data
View(nycflights13:airlines )
airlines <- nycflights13::airlines
View(airlines)
airlines <- nycflights13::airlines # show the data-set for the airlines
airports  <- nycflights13::airports # show the data-set for the airports
flights <- nycflights13::flights # show the data-set for the airprots
planes <- nycflights13::planes # show the data-set for the airports
weather <- nycflights13::weather # show the data-set for the weathers
View(airports)
View(flights)
View(planes)
View(weather)
flights %>%
filter(month == 1 & dep-daly >10)
library(dplyr)
library(dplyr)
flights %>%
filter(month == 1 & dep-daly >10)
flights %>%
filter(month == 1 & dep_delay >10)
flights %>%
filter(month == 1 & dep_delay >10) %>%
summarise(n())
flights %>%
filter(month == 1 & dep_delay >10) %>%
summarise(number-of-orvesation <- n())
flights %>%
filter(month == 1 & dep_delay >10) %>%
summarise(number_of_orvesation <- n())
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of <- n(), mean())
source("~/greenFox/CEU-Traning/R/R_Traning/Session-6.R", echo=TRUE)
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of <- n(), mean())
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of = n(), mean(arr_delay))
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of = n(), mean(arr_delay, na.rm = T))
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of = n(), mean(arr_delay, na.rm = T), max())
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of = n(), mean(arr_delay, na.rm = T), max(arr_delay))
flights %>%
filter( origin == "LGA") %>%
summarise(amount_of = n(), mean(arr_delay, na.rm = T), max(arr_delay, na.rm = T))
?flights
# task -3 A) which plane was the most exact in time where e orignin is EWR or JFK,
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%
summarise(avrege_delay= mean())
# task -3 A) which plane was the most exact in time where e orignin is EWR or JFK,
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(tailnum), max(tailnum))
# task -3 A) which plane was the most exact in time where e orignin is EWR or JFK,
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(tailnum ,na.rm = T), max(tailnum, na.rm = T))
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(tailnum ,na.rm = T))
flights %>%
filter(origin == "EWR" | origin == "JFK")
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum)
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(tailnum ,na.rm = T))
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T))
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arange(avrege_delay)
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay)
View(avrege_delay)
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay)
View(df)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege= avrege_delay) %>%
arrange(-abs_avrege)
View(df)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege= avrege_delay) %>%
arrange(abs_avrege)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege= abs(avrege_delay)) %>%
arrange(abs_avrege)
head(abs_avrege)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege= abs(avrege_delay)) %>%
arrange(abs_avrege) %>%
head(abs_avrege)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege = abs(avrege_delay)) %>%
arrange(abs_avrege) %>%
head(abs_avrege) %>%
head(1)
arrange(abs_avrege) %>%
head(abs_avrege) %>%
head(1)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege = abs(avrege_delay)) %>%
arrange(abs_avrege) %>%
head(abs_avrege) %>%
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege = abs(avrege_delay)) %>%
arrange(abs_avrege) %>%
head(abs_avrege) %>%
head(1)
df<-   # make new view for my table result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>% # first to filter
group_by(tailnum) %>%  # second to group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # third to check
arrange(avrege_delay) %>%
mutate(abs_avrege = abs(avrege_delay)) %>%
arrange(abs_avrege) %>%
head(1)
diamonds <- diamonds.txt
data(diamonds)
View(diamonds)
install.packages("ggplot2")
data(diamonds)
data(diamonds)
View(diamonds)
library(nycflights13)
library( tidyverse )
library(ggplot2)
data(diamonds)
force(diamonds)
diamonds <- data(diamonds)
diamonds <- diamonds
View(diamonds)
diamonds <- View(diamonds)
# task-1: Read the 3 diamonds data sets and show the head of that.
diamonds
# task-1: Read the 3 diamonds data sets and show the head of that.
diamonds %>%
head(3)
# task-1: Read the 3 diamonds data sets and show the head of that.
diamonds %>%
head(3)
diamonds <- data(diamonds)
# task-1: Read the 3 diamonds data sets and show the head of that.
diamonds %>%
head(3)
# task-1: Read the 3 diamonds data sets and show the head of that.
diamonds
# task-1: Read the 3 diamonds data sets and show the head of that.
data(diamonds)
data(diamonds)
data("diamonds")
data(diamonds)
data(diamonds)
head()
data(diamonds) %>%
head(3)
data(diamonds) %>%
head(3)
head(diamonds)
head(diamonds)
read.table(diamonds.txt,
header = TRUE,
sep = ",",
dec = ".")
read.table(diamonds.txt,
header = TRUE,
sep = ",",
dec = ".")
head(diamonds)
read.table(diamonds.txt,
header = TRUE,
sep = ",",
dec = ".")
read.table(diamonds,
header = TRUE,
sep = ",",
dec = ".")
read.table(file = diamonds,
header = TRUE,
sep = ",",
dec = ".")
read.table(file = "diamonds.txt",
header = TRUE,
sep = ",",
dec = ".")
read.table(file = diamonds.txt,
header = TRUE,
sep = ",",
dec = ".")
read.table(file = diamonds,
header = TRUE,
sep = ",",
dec = ".")
# install.packages('nycflights13')
library(ggplot2)
library(nycflights13)
library( tidyverse )
diamonds <- data(diamonds)
# task-1: Read the 3 diamonds data sets and show the head of that.
head(diamonds)
read.table(file = diamonds,
header = TRUE,
sep = ",",
dec = ".")
read.table(file = "diamonds.txt",
header = TRUE,
sep = ",",
dec = ".")
# install.packages('nycflights13')
library(ggplot2)
library(nycflights13)
library( tidyverse )
diamonds <- data(diamonds)
# task-1: Read the 3 diamonds data sets and show the head of that.
head(diamonds)
read.table(file = "diamonds.txt",
header = TRUE,
sep = ",",
dec = ".")
read.table(file = "diamonds.txt",
header = TRUE,
sep = ",",
dec = ".")
path <- file.path(Users/JM/greenFox/CEU-Traning/R/R_Traning/diamonds.txt)
path <- file.path("Users","JM","greenFox","CEU-Traning","R","R_Traning","diamonds.txt")
read.table(file = path,
header = TRUE,
sep = ",",
dec = ".")
path <- file.path("Users","JM","greenFox","CEU-Traning","R","R_Traning","diamonds.txt")
read.table(file = path,
header = TRUE,
sep = ",",
dec = ".")
path <- file.path("~","Users","JM","greenFox","CEU-Traning","R","R_Traning","diamonds.txt")
read.table(file = path,
header = TRUE,
sep = ",",
dec = ".")
reading_from_url
reading_from_url <- read.csv(url("https://github.com/CEU-Economics-and-Business/ECBS-5208-Coding-1-Business-Analytics/tree/master/class_2/data/hotels/clean")
)
reading_from_url
View(reading_from_url)
View(reading_from_url)
View(reading_from_url)
View(reading_from_url)
View(reading_from_url)
head(reading_from_url)
head(reading_from_url)
web_url <-'https://github.com/CEU-Economics-and-Business/ECBS-5208-Coding-1-Business-Analytics/blob/master/class_2/data/hotels/clean/my_csvfile.csv'
reading_from_url <- read.csv(web_url)
head(reading_from_url)
View(airlines)
View(airports)
View(airlines)
View(flights)
View(planes)
View(weather)
View(planes)
df<-           # define variable as new table to have better view for result to check
flights %>%
filter(origin == "EWR" | origin == "JFK") %>%            # 1-step: filter
group_by(tailnum) %>%                                    # 2-step: group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # 3-step: find Average and defined to variable, and summarise it
arrange(avrege_delay) %>%                                # 4-step: sort the data
mutate(abs_avrege = abs(avrege_delay)) %>%               # 5-step: define new column to the table
arrange(abs_avrege) %>%                                  # 6-step: sort that column
head(1)                                                  # 7-step: grab the first one
flights %>%
filter(origin == "EWR" | origin == "JFK") %>%            # 1-step: filter
group_by(tailnum) %>%                                    # 2-step: group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T)) %>%  # 3-step: find Average and defined to variable, and summarise it
arrange(avrege_delay) %>%                                # 4-step: sort the data
mutate(abs_avrege = abs(avrege_delay)) %>%               # 5-step: define new column to the table
arrange(abs_avrege) %>%                                  # 6-step: sort that column
head(1)
flights %>%
filter(origin == "EWR" | origin == "JFK")%>%            # 1-step: filter
group_by(tailnum)%>%                                    # 2-step: group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T))%>%  # 3-step: find Average and defined to variable, and summarise it
arrange(avrege_delay)%>%                                # 4-step: sort the data
mutate(abs_avrege = abs(avrege_delay))%>%               # 5-step: define new column to the table
arrange(abs_avrege)%>%                                  # 6-step: sort that column
head(1)
install.packages("dplyr")
flights %>%
filter(origin == "EWR" | origin == "JFK")%>%            # 1-step: filter
group_by(tailnum)%>%                                    # 2-step: group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T))%>%  # 3-step: find Average and defined to variable, and summarise it
arrange(avrege_delay)%>%                                # 4-step: sort the data
mutate(abs_avrege = abs(avrege_delay))%>%               # 5-step: define new column to the table
arrange(abs_avrege)%>%                                  # 6-step: sort that column
head(1)
flights %>%
filter(origin == "EWR" | origin == "JFK")%>%            # 1-step: filter
group_by(tailnum)%>%                                    # 2-step: group each plan by them tailnum
summarise(avrege_delay= mean(arr_delay ,na.rm = T))%>%  # 3-step: find Average and defined to variable, and summarise it
arrange(avrege_delay)%>%                                # 4-step: sort the data
mutate(abs_avrege = abs(avrege_delay))%>%               # 5-step: define new column to the table
arrange(abs_avrege)%>%                                  # 6-step: sort that column
head(1)
diamonds_txt <- read.delim("diamonds.txt", header = TRUE, sep = "#")
setwd("/Users/JM/greenFox/CEU-Traning/R/R_Traning")
summary(mtcars)
