vector_of_all_links
vector_of_all_links
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
one_link <- vector_of_all_links[1] # check the link will be correct
one_link
vector_of_all_links <- c()
get_all_links <- function(pageNum) {
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
relative_link <- gsub('#UserReviews','',relative_link)
return(relative_link)
}
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
one_link <- vector_of_all_links[1] # check the link will be correct
one_link
one_link
vector_of_all_links
# 1 get all the link. save it
vector_of_all_links <- c()
relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
return(relative_link)
get_all_links <- function(pageNum) {
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relative_link <- gsub('#UserReviews','',relative_link)
relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
return(relative_link)
}
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
one_link <- vector_of_all_links[1] # check the link will be correct
one_link
vector_of_all_links
vector_of_all_links
one_link
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
# 1 get all the link. save it
vector_of_all_links <- c()
get_all_links <- function(pageNum) {
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relative_link <- gsub('#UserReviews','',relative_link)
#relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
return(relative_link)
}
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relative_link <- gsub('#UserReviews','',relative_link)
return(relative_link)
get_all_links <- function(pageNum) {
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relative_link <- gsub('#UserReviews','',relative_link)
#relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
return(relative_link)
}
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
one_link <- vector_of_all_links[1] # check the link will be correct
one_link
vector_of_all_links
one_link
one_link <- vector_of_all_links[1] # check the link will be correct
vector_of_all_links
library(rvest)
# 1 get all the link. save it
vector_of_all_links <- c()
get_all_links <- function(pageNum) {
url <- paste0("https://www.motorcycle.com/specs/kawasaki.html?page_num=", pageNum)
t <- read_html(url)
relative_link <- t %>% html_nodes('.flex-one a') %>% html_attr('href')
relative_link <- gsub('#UserReviews','',relative_link)
#relatvie_link <- paste0('https://www.motorcycle.com', relative_link)
return(relative_link)
}
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
for (pageNum in 1:3) {
get_all_links(pageNum)
vector_of_all_links <- append( vector_of_all_links, relative_link)
}
one_link <- vector_of_all_links[1] # check the link will be correct
one_link <- vector_of_all_links[1]
one_link
vector_of_all_links
shiny::runApp('greenFox/CEU-Traning/R/week_13')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app-1.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app_2.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app-1.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app_2.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app_2.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app_2.R')
library(data.table)
library(jsonlite)
library(rsconnect)
library(shiny)
library(ggplot2)
library(data.table)
library(jsonlite)
library(rsconnect)
# 1- returning the data.Frame in the result
get_coin_df <- function(coin, coin_days) {
df <- data.table(fromJSON(paste0('https://api.coingecko.com/api/v3/coins/',coin,'/ohlc?vs_currency=usd&days=',coin_days), simplifyDataFrame = T))
names(df) <- c('time', 'open', 'high','low','close')
#convert UNIX timestamp to date
df$time <- as.POSIXct((df$time/1000), origin="1970-01-01")
return(df)
}
# 2- showing the plot by getting the id
getCoinPlot <- function(coin_df) {
result <- ggplot(coin_df,aes(x=time, y=close))+
geom_line()+
theme_bw()
return(result)
}
# get the first 100 coin as list in the function
get_coin_list <- function() {
list <- fromJSON("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en")
list <- list[c('id','name')]
return(list)
}
# -----------UI in shinny app ------------------------------
ui <- fluidPage(
# show the first 100 coin as drop Down
uiOutput('show_coin'),
# show drop Down for selecting the date
uiOutput('show_date'),
# for showing just plot got data from the two drop down in server part
plotOutput('crypto_plot'),
# show the table of all coines
#tableOutput('new_table_out'),
dataTableOutput('new_table_out'),
)
server <- function(input, output, session) {
# 1- call the function to get data.Frame
coin_list <- get_coin_list()
# 2-  creating reactive variable for all
actuall_coin <- reactive({ get_coin_df(input$coin, input$coin_days)})
# ---- Outputs >>>
# output for show_coin as drop down
output$show_coin <- renderUI({ selectInput("coin", "Select a coin",
setNames(coin_list$id, coin_list$name),selected = 'bitcoin')
})
# output for selecting Day in drop Down
output$show_date <- renderUI({ selectInput("coin_days", "Select the time",
c('1','7','14','30','90','180','365'),selected = '1')
})
# returning the new_table_out as list of all the coin
output$new_table_out <- renderTable({ actuall_coin()})
# returning the plot to show
output$crypto_plot <- renderPlot({ getCoinPlot(actuall_coin())})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(data.table)
library(jsonlite)
library(rsconnect)
# 1- returning the data.Frame in the result
get_coin_df <- function(coin, coin_days) {
df <- data.table(fromJSON(paste0('https://api.coingecko.com/api/v3/coins/',coin,'/ohlc?vs_currency=usd&days=',coin_days), simplifyDataFrame = T))
names(df) <- c('time', 'open', 'high','low','close')
#convert UNIX timestamp to date
df$time <- as.POSIXct((df$time/1000), origin="1970-01-01")
return(df)
}
# 2- showing the plot by getting the id
getCoinPlot <- function(coin_df) {
result <- ggplot(coin_df,aes(x=time, y=close))+
geom_line()+
theme_bw()
return(result)
}
# get the first 100 coin as list in the function
get_coin_list <- function() {
list <- fromJSON("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en")
list <- list[c('id','name')]
return(list)
}
# -----------UI in shinny app ------------------------------
ui <- fluidPage(
# show the first 100 coin as drop Down
uiOutput('show_coin'),
# show drop Down for selecting the date
uiOutput('show_date'),
# for showing just plot got data from the two drop down in server part
plotOutput('crypto_plot'),
# show the table of all coines
#tableOutput('new_table_out'),
dataTableOutput('data_table_out'),
)
server <- function(input, output, session) {
# 1- call the function to get data.Frame
coin_list <- get_coin_list()
# 2-  creating reactive variable for all
actuall_coin <- reactive({ get_coin_df(input$coin, input$coin_days)})
# ---- Outputs >>>
# output for show_coin as drop down
output$show_coin <- renderUI({ selectInput("coin", "Select a coin",
setNames(coin_list$id, coin_list$name),selected = 'bitcoin')
})
# output for selecting Day in drop Down
output$show_date <- renderUI({ selectInput("coin_days", "Select the time",
c('1','7','14','30','90','180','365'),selected = '1')
})
# returning the new_table_out as list of all the coin
output$new_table_out <- renderTable({ actuall_coin()})
output$dat_table_out <- renderDataTable({ actuall_coin()})
# returning the plot to show
output$crypto_plot <- renderPlot({ getCoinPlot(actuall_coin())})
}
shinyApp(ui, server)
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app_2.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/app-1.R')
getCoinPlot <- function(coin) {
df <- data.table(fromJSON(paste0('https://api.coingecko.com/api/v3/coins/',coin,'/ohlc?vs_currency=usd&days=1'), simplifyDataFrame = T))
names(df) <- c('time', 'open', 'high','low','close')
#convert UNIX timestamp to date
df$time <- as.POSIXct((df$time/1000), origin="1970-01-01") # Convert UNIX Timestamp to Date in R
result <- ggplot(df,aes(x=time, y=close))+
geom_line()+
theme_bw()
return(result)
}
library(ggplot2)
library(data.table)
library(jsonlite)
coin <- 'ethereum'
# -1 go to this website to get API: https://www.coingecko.com/en/api/documentation
# 2- in the "Coins" part find the "/coin/{id}/ohlc   Get coin's OHLC "
# 3- click on try it out and fill the places
# 4- copy the API
getCoinPlot <- function(coin) {
df <- data.table(fromJSON(paste0('https://api.coingecko.com/api/v3/coins/',coin,'/ohlc?vs_currency=usd&days=1'), simplifyDataFrame = T))
names(df) <- c('time', 'open', 'high','low','close')
#convert UNIX timestamp to date
df$time <- as.POSIXct((df$time/1000), origin="1970-01-01") # Convert UNIX Timestamp to Date in R
result <- ggplot(df,aes(x=time, y=close))+
geom_line()+
theme_bw()
return(result)
}
p <- getCoinPlot('ethereum')
print(p)
library(shiny)
library(ggplot2)
library(data.table)
library(jsonlite)
library(rsconnect)
# 1- returning the data.Frame in the result
get_coin_df <- function(coin, coin_days) {
df <- data.table(fromJSON(paste0('https://api.coingecko.com/api/v3/coins/',coin,'/ohlc?vs_currency=usd&days=',coin_days), simplifyDataFrame = T))
names(df) <- c('time', 'open', 'high','low','close')
#convert UNIX timestamp to date
df$time <- as.POSIXct((df$time/1000), origin="1970-01-01")
return(df)
}
# 2- showing the plot by getting the id
getCoinPlot <- function(coin_df) {
result <- ggplot(coin_df,aes(x=time, y=close))+
geom_line()+
theme_bw()
return(result)
}
# get the first 100 coin as list in the function
get_coin_list <- function() {
list <- fromJSON("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en")
list <- list[c('id','name')]
return(list)
}
# -----------UI in shinny app ------------------------------
ui <- fluidPage(
# show the first 100 coin as drop Down
uiOutput('show_coin'),
# show drop Down for selecting the date
uiOutput('show_date'),
# for showing just plot got data from the two drop down in server part
plotOutput('crypto_plot'),
# show the table of all coines
tableOutput('new_table_out'),
)
server <- function(input, output, session) {
# 1- call the function to get data.Frame
coin_list <- get_coin_list()
# 2-  creating reactive variable for all
actuall_coin <- reactive({ get_coin_df(input$coin, input$coin_days)})
# ---- Outputs >>>
# output for show_coin as drop down
output$show_coin <- renderUI({ selectInput("coin", "Select a coin",
setNames(coin_list$id, coin_list$name),selected = 'bitcoin')
})
# output for selecting Day in drop Down
output$show_date <- renderUI({ selectInput("coin_days", "Select the time",
c('1','7','14','30','90','180','365'),selected = '1')
})
# returning the new_table_out as list of all the coin
output$new_table_out <- renderTable({ actuall_coin()})
# returning the plot to show
output$crypto_plot <- renderPlot({ getCoinPlot(actuall_coin())})
}
shinyApp(ui, server)
runApp('greenFox/CEU-Traning/R/Stock_Browser/DV4-2023-main')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
shiny::runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/Projects/Crypto_tracker')
runApp('greenFox/CEU-Traning/R/week_13/layout')
runApp('greenFox/CEU-Traning/R/week_13/layout')
runApp('greenFox/CEU-Traning/R/week_13/layout')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_13/Bitcoin_price/chart_of_100_coin.R')
runApp('greenFox/CEU-Traning/R/week_12/1-shiny')
runApp('greenFox/CEU-Traning/R/week_12/firstApp')
library(rvest)
library(dplyr)
link <-'https://www.imdb.com/search/title/?title_type=feature'
# ---------------- First step: read the URL
page <- read_html(link)
# -------------- Second step:  define variables
name <- page %>% html_nodes(".lister-item-header a") %>% html_text()
year <- page %>% html_nodes(".text-muted.unbold") %>% html_text()
metaScore <- page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
duration <- page %>% html_nodes(".runtime") %>% html_text()
gener <- page %>% html_nodes(".genre") %>% html_text()
# ------- third step: push to DataFrame , Facing Error = arguments imply differing number of rows: 50, 43, 45
movies_dataFrame <- data.frame(name,year,metaScore,duration,gener, stringsAsFactors = FALSE)
View(page)
View(convert_list)
# ----- third step: push data to List
movies_list <- list()
movies_list[["name"]] <- name
movies_list[["year"]] <- year
movies_list[["metaScore"]] <- metaScore
movies_list[["duration"]] <- duration
movies_list[["gener"]] <- gener
# convert a LIST to DATAFRAME file
convert_list <- rbind(movies_list). # combine in 1 row
# convert a LIST to DATAFRAME file
convert_list <- rbind(movies_list). # combine in 1 row
convert_list_1 <- cbind(movies_list) # combine in 1 column
View(convert_list_1)
View(movies_list)
library(rvest)
library(xml2)
yacht_details <- function(userUrl) {
yacht <- read_html(userUrl) # 1 step: read the link of the website
# 2: define name
name <- yacht %>% html_nodes(".heading--large") %>% html_text()
name<- gsub('for sale','',name)
# 2: define price & built
price_built <- yacht %>% html_nodes(".stats__heading span") %>% html_text()
builtBy <- price_built[1]
price <- price_built[2]
builtBy
price
# 3:  push all the data to a DATAFRAME file for result
data <- data.frame("Yacht Name"= name,"Built By"=builtBy ,"Price"= price,"url"= url)
data
return(data) # my data is ready from the web
}
url <- read_html('https://www.boatinternational.com/yachts-for-sale')             # read the html file
all_tags <-url %>% html_nodes(".card__title--sponsored a") %>% html_attr("href")    # for reading only the links
conect_links <- paste0("https://www.boatinternational.com",all_tags)
conect_links
# ---------------
result <- data.frame()
for (item in conect_links) {
data_set <- yacht_details(item)
result <- rbind(data, data_set)
}
View(result)
View(url)
library(rvest)
library(xml2)
yacht_details <- function(userUrl) {
yacht <- read_html(userUrl) # 1 step: read the link of the website
# 2: define name
name <- yacht %>% html_nodes(".heading--large") %>% html_text()
name<- gsub('for sale','',name)
# 2: define price & built
price_built <- yacht %>% html_nodes(".stats__heading span") %>% html_text()
builtBy <- price_built[1]
price <- price_built[2]
builtBy
price
# 3:  push all the data to a DATAFRAME file for result
data <- data.frame("Yacht Name"= name,"Built By"=builtBy ,"Price"= price,"url"= url)
data
return(data) # my data is ready from the web
}
url <- read_html('https://www.boatinternational.com/yachts-for-sale')             # read the html file
all_tags <-url %>% html_nodes(".card__title--sponsored a") %>% html_attr("href")    # for reading only the links
conect_links <- paste0("https://www.boatinternational.com",all_tags)
conect_links
# ---------------
result <- data.frame()
for (item in conect_links) {
data_set <- yacht_details(item)
result <- rbind(data, data_set)
}
View(result)
library(rvest)
library(xml2)
library(data.table)
library(plyr)
# 1- get all the link by loop and save in one vector
all_links <-c() # create a vector for collecting all the links
for (i in 2:5) {      # in each loop we check one page
my_sec_links <- paste0("https://www.yachtworld.co.uk/boats-for-sale/?page=", i)
t<-read_html(my_sec_links)
my_links <- t %>% html_node(".listings-container") %>% html_nodes("a") %>% html_attr("href")
all_links <-c(all_links, my_links) # add to the empty vector each time in loop one more data from inner vector
}
all_links # a vector of all the links
get_yacht_word_ship <- function(t_url) {
url <- read_html(t_url)
# defined the list of the content
details <- list()
details [["name"]] <- url %>% html_nodes(".heading") %>% html_text()
details[["price"]] <- url %>% html_nodes(".payment-total") %>% html_text()
# contact
key <- url %>%  html_nodes(".datatable-title") %>% html_text()
value <- url %>%  html_nodes(".datatable-value") %>% html_text()
if (length(key)==length(value)) {
for (i in 1:length(key)) {
print(paste0(key[i]," : ", value[i]))
details[[ key[i] ]] <- value[i]
}
}
return(details)
}
my_new_list <- lapply(all_links, get_yacht_word_ship)
my_new_list <- lapply(all_links, get_yacht_word_ship)
new_data_set<- rbindlist(my_new_list,fill = T)
View(new_data_set)
library(rvest)
library(package)
t <- read_html('https://www.yachtworld.co.uk/yacht/1989-palmer-johnson-motorsailer-8587552/')
t %>% html_table()
all <- rbindlist(t %>% html_table())
all <- all[!duplicated(all)]
df<- data.table(all %>% pivot_wider(names_from = X1, values_from = X2))
df<- data.table(all %>% pivot_wider(names_from = X1, values_from = X2))
View(all)
View(df)
View(df)
View(df)
df
df
View(all)
setwd("~/greenFox/CEU-Traning/R/final_Project")
shiny::runApp('Stock_Browser')
runApp('Crypto_tracker')
install.packages("devtools")
devtools::install_version("MASS", "7.3-51.1")
devtools::install_version("MASS", "7.3-51.1")
libray(Mass)
library(MASS)
library(MASS)
library(shinythemes)
library(shinydashboard)
library(MASS)
shiny::runApp('Crypto_tracker')
R.version()
