)
mtcars
df <- mtcars
str(df)
nrow(df). # show the amount of the row in the df
nrow(df)
for (i in 1:10) {
print(i)
}
for (letter in letters) {
print(letter)
}
for(i in letters){
if(letters[i] / 2 != 0){
print(i)
}
}
for(i in letters){
if((letters[i] / 2) != 0){
print(i)
}
}
for(i in letters){
# if((letters[i] / 2) != 0){
#  print(i)
# }
print(letters[i])
}
# if((letters[i] / 2) != 0){
#  print(i)
# }
print(letters)
for(i in letters.length){
# if((letters[i] / 2) != 0){
#  print(i)
# }
print(i)
}
print(letters)
print(letters.length())
seq(1:100, 2)
seq(1,100, 2)
seq(a,z, 2)
seq(a,leeters.length , 2)
seq(a,lengthOfTheLetters, 2)
lengthOfTheLetters <- length(letters)
seq(a,lengthOfTheLetters, 2)
lengthOfTheLetters <- length(letters)
seq(a,lengthOfTheLetters, 1)
lengthOfTheLetters <- length(letters)
seq(1,lengthOfTheLetters, 2)
for(i in length(letters)){
if((i / 2) != 0){
print(i)
}
print(i)
}
for(i in length(letters)){
if((i / 2) != 0){
print(letters[i])
}
}
for(i in seq(1,length(letters),2){
for(i in seq(1,length(letters),2)){
print(i)
}
for(i in seq(1,length(letters),2)){
print(i)
print(letters[i])
}
checkNumber <-function(num){
if(num / 2 == 0){
print("even")
}else{
print("odd")
}
}
chckNumber(a)
checkNumber(a)
checkNumber(a)
checkNumber(a)
checkNumber(a)
a <- 11
# show the number if it's odd or even
checkNumber <-function(num){
if((num %% 2) == 0){
print("even")
}else{
print("odd")
}
}
checkNumber(a)
a <- 10
# show the number if it's odd or even
checkNumber <-function(num){
if((num %% 2) == 0){
print("even")
}else{
print("odd")
}
}
checkNumber(a)
answer
answer <- checkNumber(a)
answer
multNumbers(3, "hello")
multNumbers <-function(num1, num2){
if(is.numeric(num1) && is.numeric(num2)) {
return(num1+num2)
}else{
return("it's not a number")
}
}
multNumbers(3, "hello")
multNumbers <-function(num1, num2){
if(is.numeric(num1) && is.numeric(num2)) {
return(num1+num2)
}else{
return("it's not a number")
}
}
multNumbers(3, "hello")
multNumbers(3, 5)
1:100 %% 2
ifelse(1:100 %% 2 == 0)
1:100 %% 2 == 0
1:100 %% 2 == 0, "even", "odd"
(1:100 %% 2 == 0, yes="even", no="odd")
ifelse(1:100 %% 2 == 0, yes="even", no="odd")
for (i in 1:20) {
if(i %% 2 == 0){
return(paste(i,"even"))
} else{
return(paste(i,"odd"))
}
}
for (i in 1:20) {
if(i %% 2 == 0){
return(paste(i,"even"))
print(paste(i,"even"))
} else{
return(paste(i,"odd"))
}
}
for (i in 1:20) {
print(checkNumber(i))
}
for (i in 1:20) {
print(paste(i,"is a",checkNumber(i)))
}
height <- 180
weight <- 72
height <- height / 100
height
height <- 180
weight <- 72
height <- height / 100
height
bmiBody <- ((weight/height)*2)
bmiBody
height <- height / 100
height
bmiBody <- weight(height*2)
bmiBody
height <- 180
weight <- 72
height <- height / 100
bmiBody <- (weight(height^2))
bmiBody <- (weight/(height^2))
bmiBody
bmiBody <- (weight/(height^2))
if(bmiBody<18.5){
print("it falls within the underweight range.")
}else if(bmiBody < 25){
print("it falls within the healthy weight range.")
}else if(bmiBody < 30){
print("it falls within the overweight range.")
}else{
print("it falls within the obesity range")
}
if(bmiBody<18.5){
print(bmiBody, "falls within the underweight range.")
}else if(bmiBody < 25){
print(bmiBody,"it falls within the healthy weight range.")
}else if(bmiBody < 30){
print(bmiBody,"it falls within the overweight range.")
}else{
print(bmiBody,"it falls within the obesity range")
}
if(bmiBody<18.5){
paste(bmiBody, "falls within the underweight range.")
}else if(bmiBody < 25){
paste(bmiBody,"it falls within the healthy weight range.")
}else if(bmiBody < 30){
paste(bmiBody,"it falls within the overweight range.")
}else{
paste(bmiBody,"it falls within the obesity range")
}
checkBmi(130, 50)
checkBmi(130, 50)
checkBmi<-function(height,weight){
height <- height
weight <- weight
height <- height / 100
bmiBody <- (weight/(height^2))
if(bmiBody<18.5){
return(paste(bmiBody, "falls within the underweight range"))
}else if(bmiBody < 25){
return(paste(bmiBody,"falls within the healthy weight range"))
}else if(bmiBody < 30){
retur(paste(bmiBody," falls within the overweight range"))
}else{
return(paste(bmiBody," falls within the obesity range"))
}
}
checkBmi(130, 50)
checkBmi<-function(height,weight){
height <- height
weight <- weight
height <- height / 100
bmiBody <- (weight/(height^2))
if(bmiBody<18.5){
return(paste(bmiBody, "falls within the underweight range"))
}else if(bmiBody < 25){
return(paste(bmiBody,"falls within the healthy weight range"))
}else if(bmiBody < 30){
return(paste(bmiBody," falls within the overweight range"))
}else{
return(paste(bmiBody," falls within the obesity range"))
}
}
checkBmi(130, 50)
checkBmi(130, 50)
checkBmi(110, 30)
checkBmi(180, 60)
checkBmi(190, 75)
findLeapirYear(2003)
findLeapirYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400){
print("this year is leapir")
}else{
print("this year is not leapir ")
}
}else{
print("this year is leapir ")
}
}else{
print("is not the leapir")
}
}
findLeapirYear(2003)
findLeapirYear(2000)
findLeapirYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print("this year is leapir")
}else{
print("this year is not leapir ")
}
}else{
print("this year is leapir ")
}
}else{
print("is not the leapir")
}
}
findLeapirYear(2000)
findLeapirYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print("this year is leap")
}else{
print("this year is not leap")
}
}else{
print("this year is leap")
}
}else{
print("is not the leap")
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year,"this year is leap"))
}else{
print(paste(year,"this year is not leap"))
}
}else{
print(paste(year,"this year is leap"))
}
}else{
print(paste(year,"is not the leap"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap year!"))
}else{
print(paste(year," is not leap year!"))
}
}else{
print(paste(year," is leap year!"))
}
}else{
print(paste(year,"is not the leap year!"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap"))
}else{
print(paste(year," is not leap"))
}
}else{
print(paste(year," is leap"))
}
}else{
print(paste(year,"is not the leap year"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap"))
}else{
print(paste(year," is not leap"))
}
}else{
print(paste(year," is leap"))
}
}else{
print(paste(year,"is not the leap year"))
}
}
findLeapYear(2000)
findLeapYear(2020)
findLeapYear(2010)
findLeapYear(2400)
for(year in 2000:2401){
findLeapirYear(year)
}
for(year in 2000:2401){
print(year)
findLeapirYear(year)
}
for(i in 2000:2401){
print(i)
findLeapirYear(i)
}
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}if(number %% 5 == 0){
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}if(number %% 5 == 0){
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}else if(number %% 5 == 0){
return('buzz')
}else if(number %% 3 == 0){
return('fizz')
}else{
return(number)
}
}
for(i in 0:100){
print(fizzBuzz(i))
}
df <- read.csv('http://bit.ly/CEU-R-heights')
df <- read.csv('http://bit.ly/CEU-R-heights')
View(df)
str(df)
df <- read.csv('http://bit.ly/CEU-R-heights')
# check the structors
str(df)
# number of row
nrow(df)
# amount of row and column
dim(df)
# amount of the row with dim( )
dim(df)[1]
# amount of the column with dim()
dim(df)[2]
# check the row names
rownames(df)
# check the column names
colnames(df)
# get the column with index
colnames(df)[5]
cars
View(cars)
View(df)
View(df)
rownames(cars) <- 1:cars.lenght
View(cars$name <- rownames(1))
View(cars$name <- rownames(1))
View(cars$name <- rownames(c(1:cars.length)))
View(cars$name <- rownames(c(1:nrow(cars))))
View(cars$name <- rownames(1:number-of-row))
cars$name <- rownames(1:number-of-row)
number-of-row <- nrow(cars)
cars$name <- rownames(1:number_of_row)
number_of_row <- nrow(cars)
1:nrow(cats)
number_of_row <- nrow(cars)
1:nrow(cars)
rownames(cars) <- 1:nrow(cars)
df$heightIn
# change the data in columns be new value and overwrite
df$heightIn <- df$heightIn * 2.5
View(df)
View(df)
View(cars)
View(df)
View(cars)
View(df)
df$weightLb <- df$weightLb * 0.45
df$weightLb <- round(df$weightLb * 0.45, 0)
# Rename all the column names to the new name
colnames(df) <- c("col-1","col-2","col-3","col-4","col-5")
mean(df$hp)
View(df)
mtcars
mean(min(df$hp))
mtcars
mean(min(df$hp))
View(cars)
View(df)
View(cars)
mtcars
mean(min(df$hp))
mean(min(mtcars$hp))
paste0("the min in the list is",min(mtcars), "and the max in the list",max(mtcars$hp))
mean(min(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list: ",max(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", mean(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),2))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),1))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("mtcars has", ncol(mtcars)," column lines and ","the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("mtcars has ", ncol(mtcars)," column lines and ","the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
# summery function
summery(mtcars)
summary(mtcars)
View(df)
mtcars
mtcars[,mtcars$hp > 200]
mtcars[,mtcars$hp > 200]
mtcars[,hp > 200]
mtcars[,mtcars$hp > 200]
mtcars[mtcars$hp > 200,]
numberOfCars <- length(mtcars[mtcars$hp > 200,])
numberOfCars <- nrow(mtcars[mtcars$hp > 200,])
nrow(mtcars[mtcars$hp > 200,])
mean(mtcars[mtcars$hp > 200,])
all_the_powers <- sum(mtcars[mtcars$hp > 200,])
mean(all_the_powers)
all_the_powers <- mean(sum(mtcars[mtcars$hp > 200,]))
mean(sum(mtcars[mtcars$hp > 200,]))
mean(mtcars[mtcars$hp > 200, "mpg"])
mtcars$hp > 200
sum(mtcars$hp > 200)
View(df)
#
mtcars
min(mtcars$qsec > 200)
min(mtcars$hp > 200)
min(mtcars[mtcars$hp < 200, "qsec"])
