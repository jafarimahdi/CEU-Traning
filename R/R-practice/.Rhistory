if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400){
print("this year is leapir")
}else{
print("this year is not leapir ")
}
}else{
print("this year is leapir ")
}
}else{
print("is not the leapir")
}
}
findLeapirYear(2003)
findLeapirYear(2000)
findLeapirYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print("this year is leapir")
}else{
print("this year is not leapir ")
}
}else{
print("this year is leapir ")
}
}else{
print("is not the leapir")
}
}
findLeapirYear(2000)
findLeapirYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print("this year is leap")
}else{
print("this year is not leap")
}
}else{
print("this year is leap")
}
}else{
print("is not the leap")
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year,"this year is leap"))
}else{
print(paste(year,"this year is not leap"))
}
}else{
print(paste(year,"this year is leap"))
}
}else{
print(paste(year,"is not the leap"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap year!"))
}else{
print(paste(year," is not leap year!"))
}
}else{
print(paste(year," is leap year!"))
}
}else{
print(paste(year,"is not the leap year!"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap"))
}else{
print(paste(year," is not leap"))
}
}else{
print(paste(year," is leap"))
}
}else{
print(paste(year,"is not the leap year"))
}
}
findLeapYear(2000)
findLeapYear(2020)
# write the function that's show the Leaper year as input
findLeapYear <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
print(paste(year," is leap"))
}else{
print(paste(year," is not leap"))
}
}else{
print(paste(year," is leap"))
}
}else{
print(paste(year,"is not the leap year"))
}
}
findLeapYear(2000)
findLeapYear(2020)
findLeapYear(2010)
findLeapYear(2400)
for(year in 2000:2401){
findLeapirYear(year)
}
for(year in 2000:2401){
print(year)
findLeapirYear(year)
}
for(i in 2000:2401){
print(i)
findLeapirYear(i)
}
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}if(number %% 5 == 0){
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}if(number %% 5 == 0){
# write a function named fizzBuzz to check the number show divide to the numbers
# and show: 3=fizz, 5=buzz, 15=fizzbuz
fizzBuzz <- function(number){
if(number %% 15 == 0 ){
return('fizzBuzz')
}else if(number %% 5 == 0){
return('buzz')
}else if(number %% 3 == 0){
return('fizz')
}else{
return(number)
}
}
for(i in 0:100){
print(fizzBuzz(i))
}
df <- read.csv('http://bit.ly/CEU-R-heights')
df <- read.csv('http://bit.ly/CEU-R-heights')
View(df)
str(df)
df <- read.csv('http://bit.ly/CEU-R-heights')
# check the structors
str(df)
# number of row
nrow(df)
# amount of row and column
dim(df)
# amount of the row with dim( )
dim(df)[1]
# amount of the column with dim()
dim(df)[2]
# check the row names
rownames(df)
# check the column names
colnames(df)
# get the column with index
colnames(df)[5]
cars
View(cars)
View(df)
View(df)
rownames(cars) <- 1:cars.lenght
View(cars$name <- rownames(1))
View(cars$name <- rownames(1))
View(cars$name <- rownames(c(1:cars.length)))
View(cars$name <- rownames(c(1:nrow(cars))))
View(cars$name <- rownames(1:number-of-row))
cars$name <- rownames(1:number-of-row)
number-of-row <- nrow(cars)
cars$name <- rownames(1:number_of_row)
number_of_row <- nrow(cars)
1:nrow(cats)
number_of_row <- nrow(cars)
1:nrow(cars)
rownames(cars) <- 1:nrow(cars)
df$heightIn
# change the data in columns be new value and overwrite
df$heightIn <- df$heightIn * 2.5
View(df)
View(df)
View(cars)
View(df)
View(cars)
View(df)
df$weightLb <- df$weightLb * 0.45
df$weightLb <- round(df$weightLb * 0.45, 0)
# Rename all the column names to the new name
colnames(df) <- c("col-1","col-2","col-3","col-4","col-5")
mean(df$hp)
View(df)
mtcars
mean(min(df$hp))
mtcars
mean(min(df$hp))
View(cars)
View(df)
View(cars)
mtcars
mean(min(df$hp))
mean(min(mtcars$hp))
paste0("the min in the list is",min(mtcars), "and the max in the list",max(mtcars$hp))
mean(min(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list: ",max(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", mean(mtcars$hp))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),2))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),1))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("mtcars has", ncol(mtcars)," column lines and ","the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
paste0("mtcars has ", ncol(mtcars)," column lines and ","the min in the list is: ",min(mtcars), " and the max in the list is: ",
max(mtcars$hp)," and the avreage number in list is: ", round(mean(mtcars$hp),0))
# summery function
summery(mtcars)
summary(mtcars)
View(df)
mtcars
mtcars[,mtcars$hp > 200]
mtcars[,mtcars$hp > 200]
mtcars[,hp > 200]
mtcars[,mtcars$hp > 200]
mtcars[mtcars$hp > 200,]
numberOfCars <- length(mtcars[mtcars$hp > 200,])
numberOfCars <- nrow(mtcars[mtcars$hp > 200,])
nrow(mtcars[mtcars$hp > 200,])
mean(mtcars[mtcars$hp > 200,])
all_the_powers <- sum(mtcars[mtcars$hp > 200,])
mean(all_the_powers)
all_the_powers <- mean(sum(mtcars[mtcars$hp > 200,]))
mean(sum(mtcars[mtcars$hp > 200,]))
mean(mtcars[mtcars$hp > 200, "mpg"])
mtcars$hp > 200
sum(mtcars$hp > 200)
View(df)
#
mtcars
min(mtcars$qsec > 200)
min(mtcars$hp > 200)
min(mtcars[mtcars$hp < 200, "qsec"])
install.packages("dplyr")
mtcars %>%
filter(hp>200)
mtcars %>%
filter(hp>200)
mtcars %>%
filter(hp>200)
library(dplyr)
mtcars %>%
filter(hp>200)
mtcars %>%
filter(hp<200 & qsce>15 & gear == 3)
# hp less than 200 gsec bigger than 15 and greater equal 3
mtcars %>%
filter(hp<200 & qsec>15 & gear == 3)
mtcars %>%
filter(hp<200 & qsec>15 & gear == 3) %>%
arrange(hp, qsec)
mtcars %>%
filter(hp<200 & qsec>15 & gear == 3) %>%
arrange(-hp, -qsec)
mtcars %>%
mutate(power2 = hp*cyl)
load("~/greenFox/CEU-Traning/R/R-practice/Session-5.R")
# dplyr library help us for data Transformation
library(dplyr)
# they war we filtered before some data
mtcars[mtcars$hp>200,]
# ----------     filter( ) in dplyr library
mtcars %>%
filter(hp>200)
# Task-1 filter the cars,where: hp less than 200 gsec bigger than 15 and gear is equal 3
mtcars %>%
filter(hp<200 & qsec>15 & gear == 3)
# --------arrange() or arrange(- , -) it help with ordering the filter and
#show in order the data from bigesst or smallest
mtcars %>%
filter(hp<200 & qsec>15 & gear == 3) %>%
arrange(-hp, -qsec)
# -------- Mutate() for creating new variable or column into the data
# in simple way add new column named power
mtcars$power <- mtcars$hp * mtcars$cyl
# with library and make new column called power2
mtcars %>%
mutate(power2 = hp*cyl)
# task 2: first filter seqal length bigger than 5
# calculate a new column called sum_length
# order the sum_length_disinfection
iris %>%
mutate(sum_length = filter(seqal > 5))%>%
arrange(-sum_length)
View(mtcars)
iris %>%
filter(seqal.length > 5) %>%
mutate(sum_length = seapa1.length + seapa1.width + Petal.Length+Petal.Width)
iris %>%
filter(seqal.length > 5) %>%
mutate(sum_length = Seapa1.length + seapa1.width + Petal.Length+Petal.Width)
iris %>%
filter(Seapa.length > 5) %>%
mutate(sum_length = Seapa1.length + seapa1.width + Petal.Length+Petal.Width)
iris%>%
filter(Seapa.length > 5) %>%
mutate(sum_length = Seapa1.length + seapa1.width + Petal.Length+Petal.Width)
View(mtcars)
iris%>%
filter(Seapal.length > 5) %>%
mutate(sum_length = Seapal.length + seapal.width + Petal.Length+Petal.Width)
iris%>%
filter(Sepal.length > 5) %>%
mutate(sum_length = Sepal.length + sepal.width + Petal.Length+Petal.Width)
View(mtcars)
iris%>%
filter(Sepal.length > 5) %>%
mutate(sum_length = Sepal.length + sepal.width + Petal.Length+Petal.Width)
View(iris)
iris <- iris
iris%>%
filter(Sepal.length > 5) %>%
mutate(sum_length = (Sepal.length + sepal.width + Petal.Length+Petal.Width)/4)
iris%>%
filter(Sepal.length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(-sum_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(sum_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(sum_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(mean_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(-mean_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(mean_length = (Sepal.Length + Sepal.Width + Petal.Length+Petal.Width)/4)
arrange(-mean_length)
df <- starwars
starwars
View(starwars)
df %>%
summarise(number_of_rows = n(),average_height = mean(height))
summarise(number_of_rows = n(),average_height = mean(height, na.rm = T))
df %>%
summarise(number_of_rows = n(),average_height = mean(height, na.rm = T))
df %>%
summarise(unique(species))
df%>%
group_by(species)
df%>%
group_by(species)%>%
summarise(number_of_rows = n())%>%
order(-number_of_rows)
df%>%
group_by(species)%>%
summarise(number_of_rows = n())%>%
order(number_of_rows)
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
order(number_of_rows)
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
arrange(number_of_rows)
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
arrange(-number_of_rows)
df %>%
summarise(unique(species))
df %>%
sumarise(unique(species))
df %>%
summarise(unique(species))
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
arrange(-number_of_rows)
df %>%
summarise(unique(species))
df %>%
group_by(species)%>%
summarise(mean(height))%>%
arrange()
df %>%
group_by(species)%>%
summarise(mean(height, na.rm = T))%>%
arrange()
df %>%
group_by(species)%>%
summarise(mean(height, na.rm = T))%>%
arrange(-)
df %>%
group_by(species)%>%
summarise(show_avrage = mean(height, na.rm = T))%>%
arrange(-show_avrage)
source("~/greenFox/CEU-Traning/R/R-practice/Session-5.R", echo=TRUE)
df %>%
group_by(species)%>%
summarise(show_avrage = mean(height, na.rm = T))%>%
arrange(-show_avrage) %>%
head(1)
df %>%
filter(height > 170) %>%
group_by(max_value = max(wight) %>%
arrange(max_value)
df %>%
df %>%
filter(height > 170) %>%
group_by(max_value = max(wight)) %>%
arrange(max_value)
df %>%
filter(height > 170) %>%
group_by(max_value = max(weight)) %>%
arrange(max_value)
df %>%
filter(height > 170) %>%
group_by(max_value = max(mess)) %>%
arrange(max_value)
df %>%
filter(height > 170) %>%
group_by(max_value = max(mass)) %>%
arrange(max_value)
df %>%
filter(height > 170) %>%
group_by(max_value = max(mass)) %>%
arrange(-max_value)
df %>%
filter(height > 170) %>%
summarise(group_by(max_value = max(mass))) %>%
arrange(-max_value)
df %>%
filter(height > 170) %>%
group_by(summarise(max_value = max(mass))) %>%
arrange(-max_value)
df %>%
filter(height > 170) %>%
group_by(species) %>%
summarise(max_value = max(mass)) %>%
arrange(-max_value)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(mean_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4)
arrange(-mean_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(mean_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4)
arrange(-mean_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(mean_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4)
arrange(-mean_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4)
arrange(-sum_length)
iris%>%
filter(Sepal.Length > 5) %>%
mutate(sum_length = (Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)/4) %>%
arrange(-sum_length)
df %>%
summarise(number_of_rows = n(),average_height = mean(height, na.rm = T))
unique(df$species)
df%>%
group_by(species)%>%
summarise(number_of_rows = n()) %>%
arrange(-number_of_rows)
